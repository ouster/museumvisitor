/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package museumvisitor

import org.junit.Test
import kotlin.test.assertEquals


class MuseumVisitorTest {

    private val visitorStateChangeListener = VisitorStateChangeListener()

    fun createVisitor(rows: Int, cols: Int) = MuseumVisitor(
            Table(rows, cols), ParserStrategy(), listOf<Command>(Report(), Place(), Move(), Left(), Right()))
            .apply { listeners.add(visitorStateChangeListener) }


    //negative tests
    @Test
    fun `test Museum Visitor reports not placed when placed has not been called`() {
        val museumVisitor = createVisitor(5,5)

        museumVisitor.action("report")
        assertEquals("Museum Visitor is not placed", visitorStateChangeListener.output)

        museumVisitor.action("move")
        assertEquals("Museum Visitor is not placed", visitorStateChangeListener.output)

        museumVisitor.action("left")
        assertEquals("Museum Visitor is not placed", visitorStateChangeListener.output)

        museumVisitor.action("right")
        assertEquals("Museum Visitor is not placed", visitorStateChangeListener.output)
    }

    @Test
    fun `test Museum Vistor rejects unsupported command`() {
        val museumVistor = createVisitor(5,5)

        museumVistor.action("teleport 0,0,north")
        assertEquals("command teleport 0,0,north not recognised, try place 0,0,north or move or left or right or report", visitorStateChangeListener.output)
    }

    @Test
    fun `test Museum Vistor is ok on a smaller table`() {
        val museumVistor = createVisitor(1,1)

        museumVistor.action("place 0,0,north")
        assertEquals("Museum Vistor placed at: 0, 0, facing: NORTH", visitorStateChangeListener.output)

        museumVistor.action("move")
        assertEquals("Cannot proceed", visitorStateChangeListener.output)

        museumVistor.action("left")
        museumVistor.action("move")
        assertEquals("Cannot proceed", visitorStateChangeListener.output)

        museumVistor.action("left")
        museumVistor.action("move")
        assertEquals("Cannot proceed", visitorStateChangeListener.output)

        museumVistor.action("left")
        museumVistor.action("move")
        assertEquals("Cannot proceed", visitorStateChangeListener.output)

        museumVistor.action("place 1,1,north")
        assertEquals("Cannot proceed", visitorStateChangeListener.output)

        museumVistor.action("place -1,-1,west")
        assertEquals("Cannot proceed", visitorStateChangeListener.output)
    }


    //positive tests
    @Test
    fun `test Museum Vistor placed successfully`() {
        val museumVistor = createVisitor(5,5)

        museumVistor.action("place 0,0,north")
        assertEquals("Musuem Visitor placed at: 0, 0, facing: NORTH", visitorStateChangeListener.output)
    }

    @Test
    fun `test Museum Vistor placed and replaced successfully`() {
        val museumVistor = createVisitor(5,5)

        museumVistor.action("place 0,0,north")
        assertEquals("Musuem Visitor placed at: 0, 0, facing: NORTH", visitorStateChangeListener.output)

        museumVistor.action("place 4,4,south")
        assertEquals("Musuem Visitor placed at: 4, 4, facing: SOUTH", visitorStateChangeListener.output)
    }

    @Test
    fun `test Museum Vistor placed successfully and reports`() {
        val museumVistor = createVisitor(5,5)

        museumVistor.action("place 0,0,north")
        assertEquals("Musuem Visitor placed at: 0, 0, facing: NORTH", visitorStateChangeListener.output)

        museumVistor.action("report")
        assertEquals("Musuem Visitor is at (0,0) Facing: NORTH", visitorStateChangeListener.output)    }

    @Test
    fun `test Museum Vistor was not placed in danger`() {
        val museumVistor = createVisitor(5,5)
        museumVistor.action("place -1,5,north")

        assertEquals("Cannot proceed", visitorStateChangeListener.output)
    }

    @Test
    fun `test Museum Vistor can turn left`() {
        val museumVisitor = createVisitor(5,5)

        museumVisitor.action("place 0,0,north")
        assertEquals("Musuem Visitor placed at: 0, 0, facing: NORTH", visitorStateChangeListener.output)

        museumVisitor.action("left")
        assertEquals("Musuem Visitor turned to (0,0) Facing: WEST", visitorStateChangeListener.output)

        museumVisitor.action("left")
        assertEquals("Musuem Visitor turned to (0,0) Facing: SOUTH", visitorStateChangeListener.output)

        museumVisitor.action("left")
        assertEquals("Musuem Visitor turned to (0,0) Facing: EAST", visitorStateChangeListener.output)

        museumVisitor.action("left")
        assertEquals("Musuem Visitor turned to (0,0) Facing: NORTH", visitorStateChangeListener.output)
    }

    @Test
    fun `test Museum Vistor can turn right`() {
        val museumVisitor = createVisitor(5,5)

        museumVisitor.action("place 4,4,north")
        assertEquals("Musuem Visitor placed at: 4, 4, facing: NORTH", visitorStateChangeListener.output)

        museumVisitor.action("right")
        assertEquals("Musuem Visitor turned to (4,4) Facing: EAST", visitorStateChangeListener.output)

        museumVisitor.action("right")
        assertEquals("Musuem Visitor turned to (4,4) Facing: SOUTH", visitorStateChangeListener.output)

        museumVisitor.action("right")
        assertEquals("Musuem Visitor turned to (4,4) Facing: WEST", visitorStateChangeListener.output)

        museumVisitor.action("right")
        assertEquals("Musuem Visitor turned to (4,4) Facing: NORTH", visitorStateChangeListener.output)
    }

    @Test
    fun `test Musuem Visitor was placed and able to move north safely`() {
        val museumVisitor = createVisitor(5,5)
        museumVisitor.action("place 2,2,north")
        assertEquals("Musuem Visitor placed at: 2, 2, facing: NORTH", visitorStateChangeListener.output)

        museumVisitor.action("move")
        assertEquals("Musuem Visitor moved to (2,3) Facing: NORTH", visitorStateChangeListener.output)

        museumVisitor.action("move")
        assertEquals("Musuem Visitor moved to (2,4) Facing: NORTH", visitorStateChangeListener.output)

        museumVisitor.action("move")
        assertEquals("Cannot proceed", visitorStateChangeListener.output)
    }

    @Test
    fun `test Musuem Visitor was placed and able to move south safely`() {
        val museumVisitor = createVisitor(5,5)
        museumVisitor.action("place 2,2,south")
        assertEquals("Musuem Visitor placed at: 2, 2, facing: SOUTH", visitorStateChangeListener.output)

        museumVisitor.action("move")
        assertEquals("Musuem Visitor moved to (2,1) Facing: SOUTH", visitorStateChangeListener.output)

        museumVisitor.action("move")
        assertEquals("Musuem Visitor moved to (2,0) Facing: SOUTH", visitorStateChangeListener.output)

        museumVisitor.action("move")
        assertEquals("Cannot proceed", visitorStateChangeListener.output)
    }

    @Test
    fun `test Musuem Visitor was placed and able to move west safely`() {
        val museumVistor = createVisitor(5,5)
        museumVistor.action("place 2,2,west")
        assertEquals("Musuem Visitor placed at: 2, 2, facing: WEST", visitorStateChangeListener.output)

        museumVistor.action("move")
        assertEquals("Musuem Visitor moved to (1,2) Facing: WEST", visitorStateChangeListener.output)

        museumVistor.action("move")
        assertEquals("Musuem Visitor moved to (0,2) Facing: WEST", visitorStateChangeListener.output)

        museumVistor.action("move")
        assertEquals("Cannot proceed", visitorStateChangeListener.output)
    }

    @Test
    fun `test Musuem Visitor was placed and able to move east safely`() {
        val museumVistor = createVisitor(5,5)
        museumVistor.action("place 2,2,east")
        assertEquals("Musuem Visitor placed at: 2, 2, facing: EAST", visitorStateChangeListener.output)

        museumVistor.action("move")
        assertEquals("Musuem Visitor moved to (3,2) Facing: EAST", visitorStateChangeListener.output)

        museumVistor.action("move")
        assertEquals("Musuem Visitor moved to (4,2) Facing: EAST", visitorStateChangeListener.output)

        museumVistor.action("move")
        assertEquals("Cannot proceed", visitorStateChangeListener.output)
    }

}
